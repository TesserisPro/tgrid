@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Dynamic reconfiguration knockout</title>
        <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
        <link rel="stylesheet" type="text/css" href="~/Content/iframe.css">
        <link rel="stylesheet" type="text/css" href="~/Content/dynamicReconfiguration.css">

        <script src="~/Scripts/iframe/jquery-1.11.0.min.js"></script>
        <script src="~/Scripts/iframe/knockout-3.0.0.js"></script>

        <script src="~/Scripts/iframe/tgrid-array-items-provider-min.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/tgrid-knockout-min.js" type="text/javascript"></script>
    </head>
<body>
    <div>
        <fieldset>
            <legend>Grid options</legend>
            <div id="changeOptionsCheckboxes">
                <span>
                    <input type="checkbox" data-bind="event:{change: function(){toggleSorting();}}" /> Enable Sorting
                </span>
                <span>
                    <input type="checkbox" data-bind="event:{change: function(){toggleGrouping();}}" /> Enable Grouping
                </span>
            </div>
            <div>Actions with grid columns</div>
            <table class="tgrid-table" id="tableColumnActionsHeader">
                <thead class="tgrid-table-header">
                    <tr>
                        <th style="width:90px">
                            Member
                        </th>
                        <th style="width:120px">
                            Header
                        </th>
                        <th style="width:390px">
                            Cell template
                        </th>
                        <th>
                        </th>
                    </tr>
                </thead>
            </table>
            <div id="tableContainer">
                <table class="tgrid-table" id="tableColumnDeleteBody" style="border:none;">
                    <tbody data-bind="foreach: {data: availableColumns, as: 'column'}">
                        <tr>
                            <td style="width:90px">
                                <span data-bind="text: member"></span>
                            </td>
                            <td style="width:120px">
                                <span data-bind="text: header"></span>
                            </td>
                            <td style="width:390px">
                                <span data-bind="text: cell"></span>
                            </td>
                            <td style="">
                                <div class="grid-delete-button" data-bind="click: function(){$parent.deleteColumn(column)}">
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <table class="tgrid-table" id="tableColumnAddBody">
                <tbody>
                    <tr style="height: 50px;">
                        <td style="width:90px">
							<select style="width:85px" data-bind="options: membersOfColumnsForAdding, value: columnForAddingMember, disable: membersOfColumnsForAdding().length == 0"></select>
                        </td>
                        <td style="width:120px">
                            <input type="text" data-bind="value: columnForAddingHeader" />
                        </td>
                        <td style="width:390px">
                            <input type="text" data-bind="value: columnForAddingCell" style="margin: 0 0 0 3px; width: 380px;"/>
                        </td>
                        <td style=" ">
                            <div class="grid-add-button" data-bind="click: function(){addColumn();}">
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </fieldset>
        <div id="test-knockout" data-bind="tgrid: { provider: itemsProvider, options: gridOptions}">
            <script type="text/html">
                <column data-g-member="Name">
                    <header>
                        First Name
                    </header>
                    <cell>
                        <span style="color: #259631;" data-bind="text: item.Name"></span>
                    </cell>
                </column>
                <column data-g-member="Surname">
                    <header>
                        Second Name
                    </header>
                </column>
                <column data-g-member="Age">
                </column>
            </script>
        </div>
        <script type="text/javascript">
            var items = [
                    { Name: "Sharilyn", Surname: "Ham", Age: "52" },
                    { Name: "John", Surname: "Figgins", Age: "20"},
                    { Name: "Matthew", Surname: "Holz", Age: "42"},
                    { Name: "Jasmine", Surname: "Seidel", Age: "32"},
                    { Name: "Ashley", Surname: "Ronan", Age: "33"},
                    { Name: "Christiana ", Surname: "Gardella", Age: "35"},
                    { Name: "Cathrine", Surname: "Swanson", Age: "30"},
                    { Name: "Alison", Surname: "Gardella", Age: "25"},
                    { Name: "Ruth", Surname: "Gardella", Age: "20"},
                    { Name: "Samantha", Surname: "Swanson", Age: "25"},
                    { Name: "Alison", Surname: "Arboleda", Age: "32" },
                    { Name: "Nicole", Surname: "Newlin", Age: "20"},
                    { Name: "Theron", Surname: "Thrush", Age: "28"},
                    { Name: "George", Surname: "Smartt", Age: "19"},
                    { Name: "Rob", Surname: "Premo", Age: "28"},
                    { Name: "Larry", Surname: "Figgins", Age: "20"},
                    { Name: "Tina", Surname: "Ham", Age: "43"},
                    { Name: "Nelson", Surname: "Seidel", Age: "31"},
                    { Name: "Ashley", Surname: "Stevens", Age: "22"},
                    { Name: "Ashley", Surname: "Gardella", Age: "21"},
                    { Name: "Cathrine", Surname: "Swanson", Age: "23"},
                    { Name: "Maya", Surname: "Lewis", Age: "25"},
                    { Name: "Ted", Surname: "Lewis", Age: "20"},
                    { Name: "William", Surname: "Swanson", Age: "25"},
                    { Name: "Alison", Surname: "Lewis", Age: "32"},
                    { Name: "Nicole", Surname: "Turner", Age: "20"},
                    { Name: "Theron", Surname: "Carter", Age: "25"},
                    { Name: "George", Surname: "Collins", Age: "39"},
                    { Name: "Matthew", Surname: "Murphy", Age: "28"}
            ];

            function vm() {
                var self = this;
                self.itemsProvider = new TesserisPro.TGrid.ArrayItemsProvider(items);
                self.gridOptions = ko.observable();

                self.toggleVirtualScrolling = function () {
                	if (!self.gridOptions().enableVirtualScroll) {
                		self.gridOptions().enableVirtualScroll = true;
                	} else {
                		self.gridOptions().enableVirtualScroll = false;
                	}
                	self.gridOptions().applyHandler();
                }

                self.availableColumns = ko.observableArray([
                    { member: "Name", header: "First Name", cell: "<span style='color: #259631;' data-bind='text: item.Name'></span>" },
                    { member: "Surname", header: "Second Name", cell: "" },
                    { member: "Age", header: "", cell: "" }
                ]);
                self.columnForAddingMember = ko.observable("");
                self.columnForAddingHeader = ko.observable("");
                self.columnForAddingCell = ko.observable("<span style='color: #259631;' data-bind='text: item.Name'></span");
                self.membersOfColumnsForAdding = ko.observableArray(new Array());
                //self.enableSelect = ko.computed(function () {
                //	return self.membersOfColumnsForAdding().length != 0;
                //});

                self.deleteColumn = function (column) {
                    for (var i = 0; i < self.gridOptions().columns.length; i++) {
                    	if (column.member == self.gridOptions().columns[i].member) {
                    		for (j = 0; j < self.gridOptions().groupBySortDescriptors.length; j++) {
                    			if (self.gridOptions().groupBySortDescriptors[j].path == self.gridOptions().columns[i].member) {
                    				self.gridOptions().groupBySortDescriptors.splice(j, 1);
                    			}
                    		}
                    		if (self.gridOptions().sortDescriptor.path == self.gridOptions().columns[i].member) {
                    			self.gridOptions().sortDescriptor = new TesserisPro.TGrid.SortDescriptor();
                    		}
                            self.membersOfColumnsForAdding.push(self.gridOptions().columns[i].member);
                            self.availableColumns.splice(i, 1);
                            self.gridOptions().columns.splice(i, 1);
                           
                            self.gridOptions().applyHandler();
                            break;
                        }
                    }
                }
                self.addColumn = function () {
                	if (self.columnForAddingMember() != undefined && self.columnForAddingMember() != "") {
                		var columnForAddIndex = -1;
                		if (self.availableColumns().length <= 0) {
                			self.gridOptions().columns.length = 0;
                		}
                		self.gridOptions().columns.push(new TesserisPro.TGrid.ColumnInfo());
                		columnForAddIndex = self.gridOptions().columns.length - 1;
                		self.gridOptions().columns[columnForAddIndex].member = self.columnForAddingMember();

                		if (self.columnForAddingHeader() != undefined && self.columnForAddingHeader() != "") {
                			var headerNew = document.createElement("div");
                			headerNew.innerHTML = self.columnForAddingHeader();
                			self.gridOptions().columns[columnForAddIndex].header = new TesserisPro.TGrid.Template(headerNew);
                		}

                		if (self.columnForAddingCell() != undefined && self.columnForAddingCell() != "") {
                			var cellNew = document.createElement("div");
                			cellNew.innerHTML = self.columnForAddingCell();
                			self.gridOptions().columns[columnForAddIndex].cell = new TesserisPro.TGrid.Template(cellNew);
                		}
                		self.availableColumns.push({ member: self.columnForAddingMember(), header: self.columnForAddingHeader(), cell: self.columnForAddingCell() });

                		for (var i = 0; i < self.membersOfColumnsForAdding().length; i++) {
                			if (self.columnForAddingMember() == self.membersOfColumnsForAdding()[i]) {
                				self.membersOfColumnsForAdding.splice(i, 1);
                				break;
                			}
                		}
                		self.gridOptions().applyHandler();
                	}
                    self.columnForAddingHeader("");
                    self.columnForAddingMember("");
                    self.columnForAddingCell("<span style='color: #259631;' data-bind='text: item.Name'></span>");
                }
                self.toggleSorting = function () {
                    if (!self.gridOptions().enableSorting) {
                        self.gridOptions().enableSorting = true;
                    } else {
                        self.gridOptions().enableSorting = false;
                    }
                    self.gridOptions().applyHandler();
                }
                self.toggleGrouping = function () {
                    if (!self.gridOptions().enableGrouping) {
                        self.gridOptions().enableGrouping = true;
                    } else {
                        self.gridOptions().enableGrouping = false;
                    }
                    self.gridOptions().applyHandler();
                }
            };

            $(function () {
                ko.applyBindings(new vm());
            });
        </script>
    </div>
</body>

</html>

