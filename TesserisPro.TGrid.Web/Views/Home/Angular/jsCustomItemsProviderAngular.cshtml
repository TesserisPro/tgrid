<script type="text/javascript">
    SyntaxHighlighter.highlight();
</script>

<pre class="brush: js">
        var SimpleItemsProvider = (function () {
        var items = [
            { Name: "John", Surname: "Figgins", Age: "20" },
            // Another items here ... ];
        function SimpleItemsProvider() {
            
        }
        SimpleItemsProvider.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
            var oldItems = new Array();
            oldItems = oldItems.concat(items);
            sort(sortDescriptors);
            setTimeout(function () {
                callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                items = new Array();
                items = items.concat(oldItems);
            }, 200);
        };
        SimpleItemsProvider.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
            callback(onFiltering(filterDescriptors).length);
        };
        ArrayItemsProvider.prototype.addItem = function (item) {
            this.items.push(item);
            if (this.onAdd)
                this.onAdd(item);
        };
        ArrayItemsProvider.prototype.removeItem = function (item) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i] == item) {
                    this.items.splice(i, 1);
                    break;
                }
            }
            if (this.onRemove)
                this.onRemove(item);
        };
        ArrayItemsProvider.prototype.clear = function () {
                this.sourceItems = new Array();
                if (this.onReset)
                    this.onReset();
        };
        function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
            if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                return items;
            }
            var isCollapsedItem = [];
            for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                isCollapsedItem.push(false);
            }
            var filterdItems = [];
            for (var j = 0; j < items.length; j++) {
                // filtering common filters
                var isFiltered = 0;
                for (var i = 0; i < filterDescriptors.length; i++) {
                    if (filter(items[j], filterDescriptors[i])) {
                        isFiltered++;
                    }
                }
                // filtering collapsed filter
                var isCollapsedFiltered = false;
                var numberfilter = -1;
                for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                    if (filter(items[j], collapsedFilterDescriptors[i])) {
                        isCollapsedFiltered = true;
                        numberfilter = i;
                        i = collapsedFilterDescriptors.length;
                    }
                }
                if (isFiltered == 0 && !isCollapsedFiltered) {
                    filterdItems.push(items[j]);
                } else {
                    if (isFiltered == 0) {
                        if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                            var fakeItem = {};
                            fakeItem["isFakeItem"] = true;
                            fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                            for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                            }
                            filterdItems.push(fakeItem);
                            isCollapsedItem[numberfilter] = true;
                        }
                    }
                }
            }
            return filterdItems;
        }
        function filter(item, filterDescriptors) {
            if (isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                if (filterDescriptors.children.length == 0) {
                    return true;
                } else {
                    var result = 0
                    for (var i = 0; i < filterDescriptors.children.length; i++) {
                        if (isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                            result++;
                        }
                    }
                    if (result == filterDescriptors.children.length) {
                        return true;
                    }
                }
            }
            return false;
        }
        function isFiltering(item, value, condition) {
            // on true push to filtered items
            switch (condition) {
                case 1://equal
                    return (item == value);
                case 2://not equal
                    return (item != value);
            }
            return false;
        }
        function sort(sortDescriptor) {
            if (sortDescriptor != null && sortDescriptor.length > 0) {
                items.sort(function (a, b) {
                    return sortingRecursive(a, b, sortDescriptor, 0);
                });
            }
        };
        function sortingRecursive(a, b, sortDescriptor, i) {
            if (i != sortDescriptor.length - 1) {
                if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                    return sortingOrder(sortDescriptor[i]);
                if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                    return sortingOrderDesc(sortDescriptor[i]);
                return sortingRecursive(a, b, sortDescriptor, i + 1)
            } else {
                return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
            }
        }
        function sortingOrder(sortDescriptor) {
            return sortDescriptor.asc ? -1 : 1;
        }
        function sortingOrderDesc(sortDescriptor) {
            return sortDescriptor.asc ? 1 : -1;
        }
        function compareItems(item1, item2, columns) {
            for (var i = 0; i < columns.length; i++) {
                if (item1[columns[i]] != item2[columns[i]]) {
                    return false;
                }
            }
            return true;
        }
        return SimpleItemsProvider;
    })();

    var sampleModule = angular.module("SampleModule", ['TGrid'])
        .controller("ctrl", function ctrl($scope) {
            $scope.dataProvider = new SimpleItemsProviderAngular();
        })
    $(function () {
    })
</pre>