@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Custom items provider angular</title>
    <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
	<link rel="stylesheet" type="text/css" href="~/Content/iframe.css">
   
    <script src="~/Scripts/iframe/angular.js"></script>
    <script src="~/Scripts/iframe/jquery-1.11.0.min.js"></script>

    <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
</head>
<body> 
    <div ng-app="SampleModule"> 
        <div ng-controller="ctrl">
            <t-grid id="test-angular" provider="dataProvider">
                 <script type="text/html">
                    <column data-g-member="Name">
                    </column>
                    <column data-g-member="Surname">
                    </column>
                    <column data-g-member="Age">
                    </column>
                </script>
            </t-grid>
        </div>
    </div>
    <script type="text/javascript">
        var SimpleItemsProviderAngular = (function () {
            var items = [
                { Name: "John", Surname: "Figgins", Age: "20", detail: "Person details: John Figgins, 20 years, accounter", detail_Name: "First name:  John", detail_Surname: "Last name: Figgins" },
                { Name: "Sharilyn", Surname: "Ham", Age: "52", detail: "Person details: Sharilyn Ham, 52 years, sales manager", detail_Name: "First name: Sharilyn", detail_Surname: "Last name: Ham" },
                { Name: "Matthew", Surname: "Holz", Age: "42", detail: "Person details: Matthew Holz, 42 years, loan officer", detail_Name: "First name: Matthew", detail_Surname: "Last name: Holz" },
                { Name: "Jasmine", Surname: "Seidel", Age: "32", detail: "Person details: Jasmine Seidel, 32 years, sales manager", detail_Name: "First name: Jasmine", detail_Surname: "Last name: Seidel" },
                { Name: "Ashley", Surname: "Ronan", Age: "33", detail: "Person details: Ashley Ronan, 33 years, cashier", detail_Name: "First name: Ashley", detail_Surname: "Last name: Ronan" },
                { Name: "Christiana ", Surname: "Gardella", Age: "35", detail: "Person details: item Christiana Gardella, 35 years, cashier", detail_Name: "First name: Christiana", detail_Surname: "Last name: Gardella" },
                { Name: "Cathrine", Surname: "Swanson", Age: "30", detail: "Person details: Cathrine Swanson, 30 years, accounter", detail_Name: "First name: Cathrine", detail_Surname: "Last name: Swanson" },
                { Name: "Alison", Surname: "Gardella", Age: "25", detail: "Person details: Alison Gardella, 25 years, sales manager", detail_Name: "First name: Alison", detail_Surname: "Last name: Gardella" },
                { Name: "Ruth", Surname: "Gardella", Age: "20", detail: "Person details: Ruth Gardella, 20 years, retailer", detail_Name: "First name: Ruth", detail_Surname: "Last name: Gardella" },
                { Name: "Samantha", Surname: "Swanson", Age: "25", detail: "Person details: Samantha Swanson, 25 years, HR officer", detail_Name: "First name: Samantha ", detail_Surname: "Last name: Swanson" },
                { Name: "Alison", Surname: "Arboleda", Age: "32", detail: "Person details:Alison Arboleda, 32 years,  sales manager", detail_Name: "First name: Alison", detail_Surname: "Last name: Arboleda" },
                { Name: "Nicole", Surname: "Newlin", Age: "20", detail: "Person details: Nicole Newlin, 20 years, accounter", detail_Name: "First name: Nicole", detail_Surname: "Last name: Newlin" },
                { Name: "Theron", Surname: "Thrush", Age: "28", detail: "Person details: Theron Thrush, 28 years, accounter", detail_Name: "First name: Theron", detail_Surname: "Last name: Thrush" },
                { Name: "George", Surname: "Smartt", Age: "19", detail: "Person details: George Smartt, 19 years, HR manager", detail_Name: "First name: George", detail_Surname: "Last name: Smartt" },
                { Name: "Rob", Surname: "Premo", Age: "28", detail: "Person details: Rob Premo, 28 years,  sales manager", detail_Name: "First name: Rob", detail_Surname: "Last name: Premo" },
                { Name: "Larry", Surname: "Figgins", Age: "20", detail: "Person details: Larry Figgins, 20 years, accounter", detail_Name: "First name:  Larry", detail_Surname: "Last name: Figgins" },
                { Name: "Tina", Surname: "Ham", Age: "43", detail: "Person details: Tina Ham, 43 years, loan officer", detail_Name: "First name: Tina", detail_Surname: "Last name: Ham" },
                { Name: "Nelson", Surname: "Seidel", Age: "31", detail: "Person details: Nelson Seidel, 31 years, sales manager", detail_Name: "First name: Nelson", detail_Surname: "Last name: Seidel" },
                { Name: "Ashley", Surname: "Stevens", Age: "22", detail: "Person details: Ashley Stevens, 22 years, cashier", detail_Name: "First name: Ashley", detail_Surname: "Last name: Stevens" },
                { Name: "Ashley", Surname: "Gardella", Age: "21", detail: "Person details: item Ashley Gardella, 21 years, cashier", detail_Name: "First name: Ashley", detail_Surname: "Last name: Gardella" },
                { Name: "Cathrine", Surname: "Swanson", Age: "23", detail: "Person details: Cathrine Swanson,23 years, accounter", detail_Name: "First name: Cathrine", detail_Surname: "Last name: Swanson" },
                { Name: "Maya", Surname: "Lewis", Age: "25", detail: "Person details: Maya Lewis, 25 years, sales manager", detail_Name: "First name: Maya", detail_Surname: "Last name: Lewis" },
                { Name: "Ted", Surname: "Lewis", Age: "20", detail: "Person details: Ted Lewis, 20 years, retailer", detail_Name: "First name: Ted", detail_Surname: "Last name: Lewis" },
                { Name: "William", Surname: "Swanson", Age: "25", detail: "Person details: William Swanson, 25 years, HR officer", detail_Name: "First name: William ", detail_Surname: "Last name: Swanson" },
                { Name: "Alison", Surname: "Lewis", Age: "32", detail: "Person details:Alison Lewis, 32 years,  sales manager", detail_Name: "First name: Alison", detail_Surname: "Last name: Lewis" },
                { Name: "Nicole", Surname: "Turner", Age: "20", detail: "Person details: Nicole Turner, 20 years, accounter", detail_Name: "First name: Nicole", detail_Surname: "Last name: Turner" },
                { Name: "Theron", Surname: "Carter", Age: "25", detail: "Person details: Theron Carter, 25 years, accounter", detail_Name: "First name: Theron", detail_Surname: "Last name: Carter" },
                { Name: "George", Surname: "Collins", Age: "39", detail: "Person details: George Collins, 39 years, HR manager", detail_Name: "First name: George", detail_Surname: "Last name: Collins" },
                { Name: "Matthew", Surname: "Murphy", Age: "28", detail: "Person details: Matthew Murphy, 28 years,  sales manager", detail_Name: "First name: Matthew", detail_Surname: "Last name: Murphy" }
            ];

            function SimpleItemsProviderAngular() {
            }

            SimpleItemsProviderAngular.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                var oldItems = new Array();
                oldItems = oldItems.concat(items);
                sort(sortDescriptors);
                setTimeout(function () {
                    callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                    items = new Array();
                    items = items.concat(oldItems);
                }, 200);
            };

            SimpleItemsProviderAngular.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                callback(onFiltering(filterDescriptors).length);
            };

            function sort(sortDescriptor) {
                if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                    items.sort(function (a, b) {
                        return sortingRecursive(a, b, sortDescriptor, 0);
                    });
                }
            };

            function sortingRecursive(a, b, sortDescriptor, i) {
                if (i != sortDescriptor.length - 1) {
                    if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                        return sortingOrder(sortDescriptor[i]);
                    if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                        return sortingOrderDesc(sortDescriptor[i]);
                    return sortingRecursive(a, b, sortDescriptor, i + 1)
                } else {
                    return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                }
            }

            function sortingOrder(sortDescriptor) {
                return sortDescriptor.asc ? 1 : -1;
            }

            function sortingOrderDesc(sortDescriptor) {
                return sortDescriptor.asc ? -1 : 1;
            }

            function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                    return items;
                }

                if (collapsedFilterDescriptors == undefined) {
                    collapsedFilterDescriptors = [];
                }

                var isCollapsedItem = [];
                for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                    isCollapsedItem.push(false);
                }

                var filteredItems = [];
                for (var j = 0; j < items.length; j++) {
                    // filtering common filters
                    var isFiltered = 0;
                    for (var i = 0; i < filterDescriptors.length; i++) {
                        if (filter(items[j], filterDescriptors[i])) {
                            isFiltered++;
                        }
                    }

                    // filtering collapsed filter
                    var isCollapsedFiltered = false;
                    var numberfilter = -1;
                    for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                        if (filter(items[j], collapsedFilterDescriptors[i])) {
                            isCollapsedFiltered = true;
                            numberfilter = i;
                            i = collapsedFilterDescriptors.length;
                        }
                    }

                    //add fake item for creating collapsing group
                    if (isFiltered == 0 && !isCollapsedFiltered) {
                        filteredItems.push(items[j]);
                    } else {
                        if (isFiltered == 0) {
                            if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                var fakeItem = {};
                                fakeItem["isFakeItem"] = true;
                                fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                    fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                }
                                filteredItems.push(fakeItem);
                                isCollapsedItem[numberfilter] = true;
                            }
                        }
                    }
                }

                return filteredItems;
            }

            function filter(item, filterDescriptors) {
                if (!isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                    if (filterDescriptors.children.length == 0) {
                        return true;
                    } else {
                        var result = 0
                        for (var i = 0; i < filterDescriptors.children.length; i++) {
                            if (!isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                result++;
                            }
                        }
                        if (result == filterDescriptors.children.length) {
                            return true;
                        }
                    }
                }

                return false;
            }

            function isFiltering(item, value, condition) {
                // on false push to filtered items
                switch (condition) {
                    case 1://equal
                        return (item == value);
                    case 2://not equal
                        return (item != value);
                }
                return false;
            }

            return SimpleItemsProviderAngular;
        })();

        var sampleModule = angular.module("SampleModule", ['TGrid'])
            .controller("ctrl", function ctrl($scope) {
                $scope.dataProvider = new SimpleItemsProviderAngular();
            })

        $(function () {
        })
    </script> 
</body>
</html>
